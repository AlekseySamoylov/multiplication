{"version":3,"sources":["AppClient.ts","ChallengeComponent.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ApiClient","fetch","SERVER_URL","GET_CHALLENGE","user","a","b","guess","POST_RESULT","method","headers","body","JSON","stringify","userAlias","factorA","factorB","ChallengeComponent","props","state","message","handleSubmitResult","bind","handleChange","challenge","then","res","ok","json","setState","updateMessage","e","name","currentTarget","this","value","event","preventDefault","sendGuess","Number","correct","resultAttempt","m","onSubmit","type","max","onChange","React","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uQAAMA,E,8FAMF,WACI,OAAOC,MAAMD,EAAUE,WAAaF,EAAUG,iB,uBAGlD,SAAiBC,EACAC,EACAC,EACAC,GACb,OAAON,MAAMD,EAAUE,WAAaF,EAAUQ,YAC1C,CACIC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UACP,CACIC,UAAWV,EACXW,QAASV,EACTW,QAASV,EACTC,MAAOA,U,KAzBzBP,EAEKE,WAAa,wBAFlBF,EAGKG,cAAgB,qBAHrBH,EAIKQ,YAAc,YA4BVR,Q,OCoFAiB,E,kDAtGX,WAAYC,GAAe,IAAD,8BACtB,cAAMA,IACDC,MAAQ,CACTd,EAAG,EAAGC,EAAG,EACTF,KAAM,GACNgB,QAAS,GACTb,MAAO,IAEX,EAAKc,mBAAqB,EAAKA,mBAAmBC,KAAxB,gBAC1B,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBATE,E,qDAY1B,WAAqB,IAAD,OAChBtB,EAAUwB,YAAYC,MAClB,SAAAC,GACQA,EAAIC,GACJD,EAAIE,OAAOH,MAAK,SAAAG,GACZ,EAAKC,SAAS,CACVxB,EAAGuB,EAAKb,QACRT,EAAGsB,EAAKZ,aAIhB,EAAKc,cAAc,+B,0BAMnC,SAAaC,GACT,IAAMC,EAAOD,EAAEE,cAAcD,KAChB,UAATA,EACAE,KAAKL,SAAS,CACVtB,MAAOwB,EAAEE,cAAcE,QAEX,SAATH,GACPE,KAAKL,SAAS,CACVzB,KAAM2B,EAAEE,cAAcE,U,gCAKlC,SAAmBC,GAAmB,IAAD,OACjCA,EAAMC,iBACNrC,EAAUsC,UAAUJ,KAAKf,MAAMf,KAC3B8B,KAAKf,MAAMd,EAAG6B,KAAKf,MAAMb,EACzBiC,OAAOL,KAAKf,MAAMZ,QACjBkB,MAAK,SAAAC,GACEA,EAAIC,GACJD,EAAIE,OAAOH,MAAK,SAAAG,GACRA,EAAKY,QACL,EAAKV,cAAc,0CAEnB,EAAKA,cAAc,oBAAsBF,EAAKa,cAAgB,mCAItE,EAAKX,cAAc,6C,2BAKnC,SAAcY,GACVR,KAAKL,SAAS,CACVT,QAASsB,M,oBAIjB,WACI,OACI,gCACI,gCACI,uDACA,+BACKR,KAAKf,MAAMd,EADhB,MACsB6B,KAAKf,MAAMb,QAGrC,uBAAMqC,SAAUT,KAAKb,mBAArB,UACI,gDAEI,uBAAOuB,KAAK,OAAOC,IAAI,KAChBb,KAAK,OACLG,MAAOD,KAAKf,MAAMf,KAClB0C,SAAUZ,KAAKX,kBAE1B,uBACA,gDAEI,uBAAOqB,KAAK,OAAOC,IAAI,IAChBb,KAAK,QACLG,MAAOD,KAAKf,MAAMZ,MAClBuC,SAAUZ,KAAKX,kBAE1B,uBACA,uBAAOqB,KAAK,SAAST,MAAM,cAE/B,6BAAKD,KAAKf,MAAMC,iB,GAjGC2B,aCAlBC,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACC,cAAC,EAAD,OCMUC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqB3B,MAAK,YAAkD,IAA/C4B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.1d756baa.chunk.js","sourcesContent":["class ApiClient {\n\n    static SERVER_URL = 'http://localhost:8080'\n    static GET_CHALLENGE = '/challenges/random'\n    static POST_RESULT = '/attempts'\n\n    static challenge(): Promise<Response> {\n        return fetch(ApiClient.SERVER_URL + ApiClient.GET_CHALLENGE)\n    }\n\n    static sendGuess(user: string,\n                     a: number,\n                     b: number,\n                     guess: number): Promise<Response> {\n        return fetch(ApiClient.SERVER_URL + ApiClient.POST_RESULT,\n            {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(\n                    {\n                        userAlias: user,\n                        factorA: a,\n                        factorB: b,\n                        guess: guess\n                    }\n                )\n            })\n    }\n}\n\nexport default ApiClient","import ApiClient from \"./AppClient\";\nimport * as React from 'react';\nimport {FormEvent} from \"react\";\ninterface Props {}\n\ninterface State {\n    a: number\n    b: number\n    user: string\n    message: string\n    guess: string\n}\n\nclass ChallengeComponent extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props)\n        this.state = {\n            a: 0, b: 0,\n            user: '',\n            message: '',\n            guess: \"\"\n        }\n        this.handleSubmitResult = this.handleSubmitResult.bind(this)\n        this.handleChange = this.handleChange.bind(this)\n    }\n\n    componentDidMount() {\n        ApiClient.challenge().then(\n            res => {\n                if (res.ok) {\n                    res.json().then(json => {\n                        this.setState({\n                            a: json.factorA,\n                            b: json.factorB\n                        })\n                    })\n                } else {\n                    this.updateMessage(\"Can't reach the server\")\n                }\n            }\n        )\n    }\n\n    handleChange(e: React.ChangeEvent<HTMLInputElement>){\n        const name = e.currentTarget.name\n        if (name === \"guess\") {\n            this.setState({\n                guess: e.currentTarget.value\n            })\n        } else if (name === \"user\") {\n            this.setState({\n                user: e.currentTarget.value\n            })\n        }\n    }\n\n    handleSubmitResult(event: FormEvent) {\n        event.preventDefault()\n        ApiClient.sendGuess(this.state.user,\n            this.state.a, this.state.b,\n            Number(this.state.guess))\n            .then(res => {\n                if (res.ok) {\n                    res.json().then(json => {\n                        if (json.correct) {\n                            this.updateMessage(\"Congratulations! Your guess is correct\")\n                        } else {\n                            this.updateMessage(\"Oops! Your guess \" + json.resultAttempt + \" is wrong, but keep playing!\")\n                        }\n                    })\n                } else {\n                    this.updateMessage(\"Error: server error or not available\")\n                }\n            })\n    }\n\n    updateMessage(m: string) {\n        this.setState({\n            message: m\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <div>\n                    <h3>Your new challenge is</h3>\n                    <h1>\n                        {this.state.a} x {this.state.b}\n                    </h1>\n                </div>\n                <form onSubmit={this.handleSubmitResult}>\n                    <label>\n                        Your alias:\n                        <input type=\"text\" max=\"12\"\n                               name=\"user\"\n                               value={this.state.user}\n                               onChange={this.handleChange}/>\n                    </label>\n                    <br/>\n                    <label>\n                        Your guess:\n                        <input type=\"text\" max=\"5\"\n                               name=\"guess\"\n                               value={this.state.guess}\n                               onChange={this.handleChange}/>\n                    </label>\n                    <br/>\n                    <input type=\"submit\" value=\"Submit\"/>\n                </form>\n                <h4>{this.state.message}</h4>\n            </div>\n        )\n    }\n}\n\nexport default ChallengeComponent","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ChallengeComponent from \"./ChallengeComponent\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <ChallengeComponent/>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}